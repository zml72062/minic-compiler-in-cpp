#ifndef INTERMEDIATE_H
#define INTERMEDIATE_H

#include <string>
#include <vector>
#include "../parse/symbols.h"

/************************************************************
 *      Definition of the intermediate representation.      *
 ************************************************************/

/** For the intermediate representation, we model our memory
 *  system as
 *      a) Main Memory, as an infinite byte array.
 *      b) infinitely many Registers, each with size INT_SIZE.
 *  We also assume the size of address into the Main Memory
 *  has size PTR_SIZE, and PTR_SIZE == INT_SIZE.
 */
#define INT_SIZE 4
#define PTR_SIZE 4

#define PLACEHOLDER 0

/**
 *  In the following, we always store user-defined variables
 *  (i.e. variables that have a symbol table entry) 
 *  in Main Memory (by using ALLOC instruction).
 *  
 *  Temporary variables (generated by compiler) are always
 *  stored in Registers.
*/

/**
 *  IRMOV dest, loperand, roperand
 *      Move the immediate 'loperand' to register 'dest'. If 'roperand' is ADDR,
 *      then 'loperand' will be understood as a global address.
 */
#define INSTR_IRMOV 0
#define ADDR 1
/**
 *  RRMOV dest, loperand
 *      Move the value stored in register 'loperand' to register 'dest'.
 */
#define INSTR_RRMOV 1
/**
 *  RMMOV dest, loperand
 *      Move the value stored in register 'loperand' to the address stored 
 *      in 'dest',
 */
#define INSTR_RMMOV 2
/**
 *  MRMOV dest, loperand
 *      Move the value stored in the address stored in 'loperand' to register 
 *      'dest'.
 */
#define INSTR_MRMOV 3
/**
 *  ALLOC dest, loperand
 *      Allocate a memory space of 'loperand' bytes to the address stored in
 *      'dest'.
 */
#define INSTR_ALLOC 4
/**
 *  NEG dest, loperand
 *  NOT dest, loperand
 *  BOOL dest, loperand
 *  ADD dest, loperand, roperand
 *  SUB dest, loperand, roperand
 *  MUL dest, loperand, roperand
 *  DIV dest, loperand, roperand
 *  MOD dest, loperand, roperand
 *  GT  dest, loperand, roperand
 *  GEQ dest, loperand, roperand
 *  LT  dest, loperand, roperand
 *  LEQ dest, loperand, roperand
 *  EQ  dest, loperand, roperand
 *  NEQ dest, loperand, roperand
 *      Instructions for unary and binary operations. Operate on values stored
 *      in registers 'loperand' and (optionally) 'roperand', and store the result 
 *      to register 'dest'.
 */
#define INSTR_NEG 5
#define INSTR_NOT 6
#define INSTR_BOOL 7
#define INSTR_ADD 8
#define INSTR_SUB 9
#define INSTR_MUL 10
#define INSTR_DIV 11
#define INSTR_MOD 12
#define INSTR_GT 13
#define INSTR_GEQ 14
#define INSTR_LT 15
#define INSTR_LEQ 16
#define INSTR_EQ 17
#define INSTR_NEQ 18
/**
 *  JMP roperand
 *      Jump to the instruction with label 'roperand'.
 */
#define INSTR_JMP 19
/**
 *  JE  loperand, roperand
 *  JNE loperand, roperand
 *      Jump to the instruction with label 'roperand' if 'loperand == 0' or
 *      'loperand != 0', where 'loperand' is a register.
 */
#define INSTR_JE 20
#define INSTR_JNE 21
/**
 *  ARG loperand, roperand
 *      Move the value stored in 'roperand' to the register for the 'loperand'-th
 *      argument.
 */
#define INSTR_ARG 22
/**
 *  LARG loperand, roperand
 *      Move the value stored in the register for the 'roperand'-th argument to
 *      register 'loperand'.
 */
#define INSTR_LARG 23
/**
 *  CALL dest, loperand, roperand
 *      Call the function whose label is 'loperand' with 'roperand' arguments, and
 *      store the return value at 'dest'.
 */
#define INSTR_CALL 24
/**
 *  RET loperand
 *      Move the value stored in 'loperand' to the return value register and 
 *      return. If 'loperand == 0', then no return value.
 */
#define INSTR_RET 25
/**
 *  GLOB loperand
 *      Declare that the immediate 'loperand' is an address for global symbol,
 *      whose memory allocation is handled by operating system.
 */
#define INSTR_GLOB 26

/************************************************************
 *    End definition of the intermediate representation.    *
 ************************************************************/

/************************************************************
 *    Additional definitions for special registers and      *
 *    instructions that appears after register allocation.  *
 ***********************************************************/

/* Two temporary registers, introduced to record memory address.
   They will be callee-saved in target code generation. */
#define DEST_TEMP 8
#define OPERAND_TEMP 9

/**
 *  SAVE loperand
 *      Save the register DEST_TEMP to the relative address 'loperand', which
 *      can be, for instance, with respect to the frame pointer.
 */
#define INSTR_SAVE 27
/**
 *  LOADO roperand
 *      Load the content of relative address 'roperand' to register OPERAND_TEMP.
 */
#define INSTR_LOADO 28
/**
 *  LOADD roperand
 *      Load the content of relative address 'roperand' to register DEST_TEMP.
 */
#define INSTR_LOADD 29

/************************************************************
 *               End additional definitions.                *
 ***********************************************************/


extern SymbolTable* symbol_table;

struct IntermediateCode
{
    std::vector<std::size_t> labels;
    std::size_t loperand;
    std::size_t roperand;
    std::size_t dest;
    std::size_t instr;
    IntermediateCode(std::size_t _instr, std::size_t _dest, std::size_t _loperand, std::size_t _roperand);
    IntermediateCode(std::size_t _instr, std::size_t _dest, std::size_t _loperand, std::size_t _roperand, std::vector<std::size_t>& _label);
    std::string to_str();
};

struct IntermediateCodeGenerator
{
private:
    std::size_t next_variable_label;
    std::size_t next_statement_label;
    std::size_t next_global_symbol_label;
    std::vector<std::size_t> statement_label;
    std::size_t label_if_break;
    std::size_t label_if_continue;
    std::vector<IntermediateCode*> code;
    std::size_t generate_addr();
    std::size_t generate_global_addr();
    std::size_t generate_label();
    std::size_t generate_code_for_exp(Symbol* symbol);
    std::size_t generate_code_for_exp_as_rval(Symbol* symbol);
    void generate_code_for_block_and_statement(Symbol* symbol);
public:
    int error;
    IntermediateCodeGenerator();
    ~IntermediateCodeGenerator();
    void generate_code();
    void print_code();
    std::vector<IntermediateCode*> simplify_code();
};


#endif