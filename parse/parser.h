#ifndef PARSER_H
#define PARSER_H

#include <stack>
#include "../lex/lex.h"
#include "symtab.h"
#include "symbols.h"
#include <utility>

#define PROGRAM_START 0
#define GET_CONST_WAIT_FOR_INT 1
#define GET_INT_WAIT_FOR_IDENT 2
#define GET_VOID_WAIT_FOR_IDENT 3
#define GET_CONST_INT_WAIT_FOR_IDENT 4
#define GET_INT_NAME_BUT_CAN_BE_FUNCTION 5
#define GET_VOID_DECLARE 6
#define GET_CONST_INT_NAME 7
#define GET_ONE_VAR_NAME_BUT_NO_INIT_PAIR 8
#define GET_INT_FUNC_DECLARE 9
#define GET_VOID_FUNC_DECLARE 10
#define GET_CONST_DEF_WITHOUT_INIT 11
#define GET_INT_NAME_FOR_VAR 12
#define GET_CONST_EXP_AS_LEN 13
#define WAIT_FOR_VAR_INIT 14
#define WAIT_FOR_VAR_ARRAY_LEN 15
#define GET_INT_ARG_TYPE 16
#define GET_NON_ARG_WITH_RET_INT 17
#define GET_NON_ARG_WITH_RET_VOID 18
#define WAIT_FOR_CONST_INIT 19
#define WAIT_FOR_CONST_ARRAY_LEN 20
#define WAIT_FOR_ARRAY_INIT 21
#define GET_EXP_AS_INIT 22
#define WAIT_FOR_CONST_ARRAY_INIT 23
#define GET_CONST_EXP_AS_CONST_INIT 24
#define GET_CONST_EXP_AS_CONST_LEN 25

#define EXP_START 100000
#define EXP_GET_IDENT 100001
#define EXP_GET_LPAREN 100002
#define EXP_GET_NUMBER 100003
#define EXP_GET_POSITIVE 100004
#define EXP_GET_NEGATIVE 100005
#define EXP_GET_NOT 100006
#define EXP_GET_LVAL 100007
#define EXP_WANT_FUNC_CALL 100008
#define EXP_GET_PRIMARY_EXP 100009
#define EXP_WANT_LVAL_INDEXING 100010
#define EXP_GET_OR 100011
#define EXP_GET_TIMES 100012
#define EXP_GET_DIVIDE 100013
#define EXP_GET_MOD 100014
#define EXP_GET_PLUS 100015
#define EXP_GET_MINUS 100016
#define EXP_GET_G 100017
#define EXP_GET_GEQ 100018
#define EXP_GET_L 100019
#define EXP_GET_LEQ 100020
#define EXP_GET_EQ 100021
#define EXP_GET_NEQ 100022
#define EXP_GET_AND 100023
#define EXP_GET_UNARY_EXP_AFTER_POSITIVE 100024
#define EXP_GET_UNARY_EXP_AFTER_NEGATIVE 100025
#define EXP_GET_UNARY_EXP_AFTER_NOT 100026
#define EXP_WANT_ADDITIONAL_ARGS 100027
#define EXP_GET_UNARY_EXP_AFTER_TIMES 100028
#define EXP_GET_UNARY_EXP_AFTER_DIVIDE 100029
#define EXP_GET_UNARY_EXP_AFTER_MOD 100030
#define EXP_GET_UNARY_EXP 100031
#define EXP_GET_MUL_EXP_AFTER_ADD 100032
#define EXP_GET_MUL_EXP_AFTER_MINUS 100033
#define EXP_GET_MUL_EXP 100034
#define EXP_GET_ADD_EXP_AFTER_G 100035
#define EXP_GET_ADD_EXP_AFTER_GEQ 100036
#define EXP_GET_ADD_EXP_AFTER_L 100037
#define EXP_GET_ADD_EXP_AFTER_LEQ 100038
#define EXP_GET_ADD_EXP 100039
#define EXP_GET_REL_EXP_AFTER_EQ 100040
#define EXP_GET_REL_EXP_AFTER_NEQ 100041
#define EXP_GET_REL_EXP 100042
#define EXP_GET_EQ_EXP_AFTER_AND 100043
#define EXP_GET_EQ_EXP 100044
#define EXP_GET_AND_EXP_AFTER_OR 100045
#define EXP_GET_AND_EXP 100046
#define EXP_GET_OR_EXP 100047
#define EXP_SUCCEED 100048
#define EXP_GET_HALF_BRACKETED_EXP 100049 
#define EXP_GET_HALF_LVAL_INDEXING_EXP 100050
#define EXP_GET_ONE_ARG 100051
#define EXP_GET_ONE_MORE_ARG 100052
#define EXP_GET_FUNC_CALL_WITHOUT_ARGS 100053
#define EXP_GET_FUNC_CALL_WITH_ARGS 100054
#define EXP_GET_BRACKETED_EXP 100055
#define EXP_GET_LVAL_INDEXING_EXP 100056
#define EXP_WANT_OPTIONALLY_MORE_ARGS 100057

#define CONST_DECL_START 200000
#define CONST_DECL_GET_CONST 200001
#define CONST_DECL_GET_CONST_INT 200002
#define CONST_DECL_GET_CONST_INT_IDENT 200003
#define CONST_DECL_GET_CONST_NAME 200004
#define CONST_DECL_WAIT_FOR_INIT_VAL 200005
#define CONST_DECL_WAIT_FOR_ARR_LEN 200006
#define CONST_DECL_WAIT_FOR_ARR_INIT_VAL 200007
#define CONST_DECL_GET_SCALAR_INIT_VAL 200008
#define CONST_DECL_GET_ARR_LEN 200009
#define CONST_DECL_GET_EMPTY_ARR_INIT_VAL 200010
#define CONST_DECL_GET_ARR_TYPE_SUFFIX 200011
#define CONST_DECL_GET_MORE_INIT_VAL 200012
#define CONST_DECL_SUCCEED 200013
#define CONST_DECL_WAIT_FOR_ONE_MORE_DECL 200014
#define CONST_DECL_GET_FIRST_DECL 200015
#define CONST_DECL_GET_ONE_MORE_DECL 200016
#define CONST_DECL_GET_ONE_CONST_DEF 200017
#define CONST_DECL_GET_FIRST_ARR_INIT_VAL 200018
#define CONST_DECL_GET_ONE_MORE_INIT_VAL 200019
#define CONST_DECL_GET_NON_EMPTY_ARR_INIT_VAL 200020
#define CONST_DECL_WAIT_FOR_OPTIONALLY_MORE_INIT_VAL 200021

#define VAR_DECL_START 300000
#define VAR_DECL_GET_INT 300001
#define VAR_DECL_GET_INT_IDENT 300002
#define VAR_DECL_GET_VAR_NAME 300003
#define VAR_DECL_WAIT_FOR_INIT_VAL 300004
#define VAR_DECL_WAIT_FOR_ARR_LEN 300005
#define VAR_DECL_GET_FIRST_DECL 300006
#define VAR_DECL_WAIT_FOR_ONE_MORE_DECL 300007
#define VAR_DECL_GET_ONE_MORE_DECL 300008
#define VAR_DECL_WAIT_FOR_ARR_INIT_VAL 300009
#define VAR_DECL_GET_SCALAR_INIT_VAL 300010
#define VAR_DECL_GET_ARR_LEN 300011
#define VAR_DECL_GET_EMPTY_ARR_INIT_VAL 300012
#define VAR_DECL_GET_ARR_TYPE_SUFFIX 300013
#define VAR_DECL_GET_ONE_VAR_DEF 300014
#define VAR_DECL_GET_FIRST_ARR_INIT_VAL 300015
#define VAR_DECL_GET_MORE_INIT_VAL 300016
#define VAR_DECL_GET_ONE_MORE_INIT_VAL 300017
#define VAR_DECL_SUCCEED 300018
#define VAR_DECL_WAIT_FOR_OPTIONALLY_MORE_INIT_VAL 300019
#define VAR_DECL_GET_NON_EMPTY_ARR_INIT_VAL 300020

#define BLOCK_START_BLOCK 400000
#define BLOCK_ENABLE_NEW_BLOCK 400001
#define BLOCK_GET_EMPTY_BLOCK 400002
#define BLOCK_GET_EMPTY_STMT 400003
#define BLOCK_GET_WHILE 400004
#define BLOCK_GET_IF 400005
#define BLOCK_GET_CONTINUE 400006
#define BLOCK_GET_BREAK 400007
#define BLOCK_GET_RETURN 400008
#define BLOCK_GET_DECL 400009
#define BLOCK_GET_LVAL 400010
#define BLOCK_GET_LVAL_ASSIGN 400011
#define BLOCK_GET_EXP 400012
#define BLOCK_SUCCEED 400013
#define BLOCK_GET_WHILE_STMT 400014
#define BLOCK_GET_IF_STMT 400015
#define BLOCK_GET_IF_ELSE_STMT 400016
#define BLOCK_GET_CONTINUE_STMT 400017
#define BLOCK_GET_BREAK_STMT 400018
#define BLOCK_GET_EMPTY_RETURN_STMT 400019
#define BLOCK_GET_NON_EMPTY_RETURN_STMT 400020
#define BLOCK_GET_RETURN_VALUE 400021
#define BLOCK_GET_IF_LPAREN 400022
#define BLOCK_GET_WHILE_LPAREN 400023
#define BLOCK_GET_IF_EXP_WAIT_FOR_RPAREN 400024
#define BLOCK_GET_WHILE_EXP_WAIT_FOR_RPAREN 400025
#define BLOCK_GET_IF_EXP 400026
#define BLOCK_GET_WHILE_EXP 400027
#define BLOCK_WAIT_FOR_OPTIONALLY_MORE_STMT 400028
#define BLOCK_GET_NEW_STMT 400029
#define BLOCK_GET_IF_STMT_AND_ELSE 400030
#define BLOCK_GET_ASSIGN_STMT_WITHOUT_SEMICOLON 400031
#define BLOCK_GET_ASSIGN_STMT 400032
#define BLOCK_GET_EXPR_STMT 400033
#define BLOCK_GET_BLOCK_STMT 400034
#define BLOCK_GET_FIRST_BLOCK_ITEM 400035
#define BLOCK_GET_ONE_MORE_BLOCK_ITEM 400036
#define BLOCK_GET_NON_EMPTY_BLOCK 400037


extern SymbolTable* symbol_table;

class Parser
{
private:
    std::stack<int> states;
    std::stack<void*> symbols; /* Store malloced pointers to symbols */
    Lexer lexer;
    int error;
    int cur_state();
    int parse_exp_next_step(std::stack<int>& _states, 
                            std::stack<void*>& _symbols);
    int parse_const_decl_next_step(std::stack<int>& _states, 
                                   std::stack<void*>& _symbols);
    int parse_var_decl_next_step(std::stack<int>& _states, 
                                 std::stack<void*>& _symbols);
    int parse_block_next_step(std::stack<int>& _states,
                              std::stack<void*>& _symbols);
    std::pair<int, int> parse_next_const_decl();
    std::pair<int, int> parse_next_var_decl();
public:
    Parser(const char* code);
    ~Parser();
    void parse_next();
    Symbol* parse_next_exp();
    std::pair<int, int> parse_next_decl();
    Symbol* parse_next_block();
};

#endif